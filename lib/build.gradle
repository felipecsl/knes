apply plugin: 'kotlin-multiplatform'
apply plugin: 'com.android.library'

android {
  compileSdkVersion 28

  defaultConfig {
    minSdkVersion 16
    targetSdkVersion 28
  }
}

dependencies {
  // Specify Kotlin/JVM stdlib dependency.
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

afterEvaluate {
  compileKotlinJs {
    kotlinOptions.metaInfo = true
    kotlinOptions.outputFile = "${project.buildDir.path}/js/${project.name}.js"
    kotlinOptions.sourceMap = true
    kotlinOptions.moduleKind = 'commonjs'
    kotlinOptions.main = "call"
  }
}

kotlin {
  jvm()
  js()
  android()
  androidNativeArm32()
  androidNativeArm64()

  targets {
    fromPreset(presets.androidNativeArm32, 'androidNativeArm32')
    fromPreset(presets.androidNativeArm64, 'androidNativeArm64')

    configure([androidNativeArm32, androidNativeArm64]) {
      binaries {
        sharedLib {
          baseName = "ktnes"
        }
      }
    }
  }

  sourceSets {
    armMain {
    }
    androidNativeArm32().compilations.main.defaultSourceSet {
      dependsOn armMain
    }
    androidNativeArm64().compilations.main.defaultSourceSet {
      dependsOn armMain
    }
    commonMain {
      dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
      }
    }
    jvm().compilations.main.defaultSourceSet {
      dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
      }
    }
    js().compilations.main.defaultSourceSet {
      dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
      }
    }
    js().compilations.test.defaultSourceSet {
      dependencies {
        implementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
        implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
        implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        implementation 'com.google.truth:truth:0.42'
        implementation 'org.mockito:mockito-core:1.10.19'
        implementation "org.robolectric:robolectric:3.8"
      }
    }
  }
}

def platforms = [
    "androidNativeArm32": "armeabi-v7a",
    "androidNativeArm64": "arm64-v8a"
]

afterEvaluate {
  task copyLibs(type: Copy) {
    def buildType = project.findProperty("kotlin.build.type") ?: "DEBUG"
    destinationDir project(":android").file("src/main/jniLibs")
    platforms.each { name, platform ->
      into(platform) {
        from kotlin.targets."$name".binaries.getSharedLib(buildType).outputFile
      }
    }
  }

  assemble {
    finalizedBy copyLibs
  }
}